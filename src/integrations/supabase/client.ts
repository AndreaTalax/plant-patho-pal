
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { PostgrestError } from '@supabase/supabase-js';

const SUPABASE_URL = "https://otdmqmpxukifoxjlgzmq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im90ZG1xbXB4dWtpZm94amxnem1xIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY2NDQ5ODksImV4cCI6MjA2MjIyMDk4OX0.re4vu-banv0K-hBFNRYZGy5VucPkk141Pa--x-QiGr4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  realtime: {
    // Fix for realtime options
    minimal: true,
  },
});

// The expert ID is used in multiple places - centralizing it here
export const EXPERT_ID = "premium-user-id" as const;

// Helper types for Supabase conversations and messages
export type DbConversation = Database['public']['Tables']['conversations']['Row'];
export type DbConversationInsert = Database['public']['Tables']['conversations']['Insert'];
export type DbConversationUpdate = Database['public']['Tables']['conversations']['Update'];

export type DbMessage = Database['public']['Tables']['messages']['Row'];
export type DbMessageInsert = Database['public']['Tables']['messages']['Insert'];
export type DbMessageUpdate = Database['public']['Tables']['messages']['Update'];

// Helper functions for type safety when dealing with Supabase responses
export function isError<T>(result: T | PostgrestError): result is PostgrestError {
  return (result as any)?.code !== undefined;
}

// Type guard to check if a value is not null or undefined
export function isNotNullOrUndefined<T>(value: T | null | undefined): value is T {
  return value !== null && value !== undefined;
}

// Cast UUID strings for Supabase queries - ensures proper type handling
export function asUUID(id: string): string {
  // Converts a string to a UUID for use with Supabase queries
  return id;
}

// Helper function to ensure API returns are properly typed
export function asDbConversation(data: any): DbConversation {
  return data as DbConversation;
}

export function asDbMessage(data: any): DbMessage {
  return data as DbMessage;
}

// Suppress TypeScript errors for object access in certain contexts
export function safeAccess<T>(obj: any, fallback: T): T {
  return obj as T || fallback;
}

// Update auth context to use these helper functions
